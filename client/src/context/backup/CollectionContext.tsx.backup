import React, { createContext, useContext, useState, useEffect } from 'react';
import { useLocalStorage } from '@/hooks/useLocalStorage';
import { useCollections } from '@/hooks/useCollections';
import { fetchCard } from '@/api/pokemonTCG';
import { Collection, CollectionCard, Card, InsertCollectionCard } from '@/types';
import { useAuth } from '@/hooks/useAuth';

interface CollectionContextProps {
  collections: Collection[];
  activeCollection: Collection | null;
  collection: CollectionCard[];
  isLoading: boolean;
  error: Error | null;
  setActiveCollection: (id: number | null) => void;
  createCollection: (data: Omit<Collection, 'id' | 'createdAt' | 'updatedAt' | 'userId'>) => Promise<Collection>;
  deleteCollection: (id: number) => Promise<void>;
  updateCollection: (collection: Collection) => Promise<Collection>;
  addCardToCollection: (cardId: string) => Promise<void>;
  removeCardFromCollection: (cardId: string) => Promise<void>;
  getCollectionCards: (collectionId?: string | number) => string[];
  getCollectionCardObjects: () => Card[];
  getAllCollectionCards: () => Card[];
  getCardQuantity: (cardId: string) => number;
}

const CollectionContext = createContext<CollectionContextProps | undefined>(undefined);

export function CollectionProvider({ children }: { children: React.ReactNode }) {
  const { user } = useAuth();
  const [activeCollectionId, setActiveCollectionId] = useLocalStorage<number | null>('activeCollectionId', null);
  const [cardsCache, setCardsCache] = useLocalStorage<Record<string, Card>>('cardsCache', {});

  // Get collections and cards from the database with proper typing
  const collectionsData = useCollections();
  
  // Explicitly define our collections and cards as arrays to fix TypeScript errors
  const collections: Collection[] = Array.isArray(collectionsData.collections) 
    ? collectionsData.collections 
    : [];
    
  const collectionCards: CollectionCard[] = Array.isArray(collectionsData.collectionCards) 
    ? collectionsData.collectionCards 
    : [];
    
  const {
    isLoading,
    error,
    createCollection: createCollectionRequest,
    deleteCollection: deleteCollectionRequest,
    updateCollection: updateCollectionRequest,
    addCardToCollection: addCardRequest,
    updateCardQuantity,
    removeCardFromCollection: removeCardRequest
  } = collectionsData;

  const [activeCollection, setActiveCollection] = useState<Collection | null>(null);

  // Set active collection whenever activeCollectionId or collections change
  useEffect(() => {
    if (activeCollectionId && collections.length > 0) {
      const collection = collections.find((c: Collection) => c.id === activeCollectionId) || null;
      setActiveCollection(collection);
      
      // Update global state (header/status bar)
      if (collection) {
        const activeCollectionIndicator = document.getElementById('activeCollectionIndicator');
        const activeCollectionNameGlobal = document.getElementById('activeCollectionNameGlobal');
        
        if (activeCollectionIndicator) activeCollectionIndicator.classList.remove('hidden');
        if (activeCollectionNameGlobal) activeCollectionNameGlobal.textContent = collection.name;
      }
    } else {
      setActiveCollection(null);
      
      // Update global state (header/status bar)
      const activeCollectionIndicator = document.getElementById('activeCollectionIndicator');
      if (activeCollectionIndicator) activeCollectionIndicator.classList.add('hidden');
    }
  }, [activeCollectionId, collections]);

  const handleSetActiveCollection = (id: number | null) => {
    setActiveCollectionId(id);
  };

  const createCollection = async (data: Omit<Collection, 'id' | 'createdAt' | 'updatedAt' | 'userId'>) => {
    const newCollection = await createCollectionRequest(data);
    // Automatically set as active collection
    setActiveCollectionId(newCollection.id);
    return newCollection;
  };

  const deleteCollection = async (id: number) => {
    await deleteCollectionRequest(id);
    // If the deleted collection was active, clear the active collection
    if (activeCollectionId === id) {
      setActiveCollectionId(null);
    }
  };
  
  const updateCollection = async (collection: Collection) => {
    return await updateCollectionRequest(collection);
  };

  const addCardToCollection = async (cardId: string) => {
    if (!activeCollection) return;
    
    try {
      // Check if we have the card details in cache
      if (!cardsCache[cardId]) {
        const cardData = await fetchCard(cardId);
        setCardsCache(prev => ({
          ...prev,
          [cardId]: cardData
        }));
      }
      
      // Get current quantity
      const existingCard = collectionCards?.find(
        (card: CollectionCard) => card.cardId === cardId && card.collectionId === activeCollection.id
      );
      
      if (existingCard) {
        // Update quantity
        await updateCardQuantity(existingCard.collectionId, existingCard.cardId, existingCard.quantity + 1);
      } else {
        // Add new card
        await addCardRequest({
          collectionId: activeCollection.id,
          cardId,
          quantity: 1
        });
      }
    } catch (error) {
      console.error('Failed to add card to collection:', error);
      throw error;
    }
  };

  const removeCardFromCollection = async (cardId: string) => {
    if (!activeCollection) return;
    
    try {
      const existingCard = collectionCards?.find(
        (card: CollectionCard) => card.cardId === cardId && card.collectionId === activeCollection.id
      );
      
      if (!existingCard) return;
      
      if (existingCard.quantity > 1) {
        // Decrease quantity
        await updateCardQuantity(existingCard.collectionId, existingCard.cardId, existingCard.quantity - 1);
      } else {
        // Remove card entirely
        await removeCardRequest(existingCard.collectionId, existingCard.cardId);
      }
    } catch (error) {
      console.error('Failed to remove card from collection:', error);
      throw error;
    }
  };

  // Get card IDs from a specific collection
  const getCollectionCards = (collectionId?: string | number): string[] => {
    // If no collection ID is provided, use the active collection
    const targetCollectionId = collectionId || (activeCollection ? activeCollection.id : null);
    
    if (!targetCollectionId) return [];
    
    // Convert to number for comparison with collectionId
    const numericId = typeof targetCollectionId === 'string' ? parseInt(targetCollectionId, 10) : targetCollectionId;
    
    // Get all cards for the specified collection
    const targetCards = collectionCards.filter((card: CollectionCard) => card.collectionId === numericId);
    
    // Return just the card IDs
    return targetCards.map((card: CollectionCard) => card.cardId);
  };
  
  // Get card objects from the active collection
  const getCollectionCardObjects = (): Card[] => {
    if (!activeCollection) return [];
    
    // Get all cards for the active collection
    const activeCards = collectionCards.filter((card: CollectionCard) => card.collectionId === activeCollection.id);
    
    // Map to card objects with quantity
    return activeCards.map((collectionCard: CollectionCard) => {
      const cardData = cardsCache[collectionCard.cardId];
      
      if (!cardData) {
        // If card data is not in cache, return minimal info
        return {
          id: collectionCard.cardId,
          name: 'Loading...',
          number: '',
          images: { small: '', large: '' },
          quantity: collectionCard.quantity,
          setId: '',
          collectionId: collectionCard.collectionId
        } as Card;
      }
      
      return {
        ...cardData,
        quantity: collectionCard.quantity,
        setId: cardData.set?.id || '',
        collectionId: collectionCard.collectionId
      } as Card;
    });
  };
  
  // Get cards from all collections
  const getAllCollectionCards = (): Card[] => {
    if (collections.length === 0) return [];
    
    // Group cards by cardId (to combine quantities across collections)
    const cardMap = new Map<string, { cardData: Card | null, totalQuantity: number, collectionIds: number[] }>();
    
    // Process all collection cards
    collectionCards.forEach((collectionCard: CollectionCard) => {
      const cardId = collectionCard.cardId;
      const cardData = cardsCache[cardId];
      
      if (!cardMap.has(cardId)) {
        cardMap.set(cardId, { 
          cardData, 
          totalQuantity: collectionCard.quantity,
          collectionIds: [collectionCard.collectionId]
        });
      } else {
        const existing = cardMap.get(cardId)!;
        existing.totalQuantity += collectionCard.quantity;
        existing.collectionIds.push(collectionCard.collectionId);
      }
    });
    
    // Convert map to array of cards
    return Array.from(cardMap, ([cardId, { cardData, totalQuantity, collectionIds }]) => {
      if (!cardData) {
        // If card data is not in cache, return minimal info with a placeholder card
        return {
          id: cardId,
          name: 'Loading...',
          number: '',
          images: { small: '', large: '' },
          quantity: totalQuantity,
          setId: '',
          collections: collectionIds
        } as Card;
      }
      
      // Return the card with added collection data
      return {
        ...cardData,
        quantity: totalQuantity,
        collections: collectionIds
      } as Card;
    });
  };

  const getCardQuantity = (cardId: string): number => {
    if (!activeCollection) return 0;
    
    const card = collectionCards?.find(
      (card: CollectionCard) => card.cardId === cardId && card.collectionId === activeCollection.id
    );
    
    return card?.quantity || 0;
  };

  return (
    <CollectionContext.Provider
      value={{
        collections: collections as Collection[] || [],
        activeCollection,
        collection: collectionCards as CollectionCard[] || [],
        isLoading,
        error,
        setActiveCollection: handleSetActiveCollection,
        createCollection,
        deleteCollection,
        updateCollection,
        addCardToCollection,
        removeCardFromCollection,
        getCollectionCards,
        getCollectionCardObjects,
        getAllCollectionCards,
        getCardQuantity
      }}
    >
      {children}
    </CollectionContext.Provider>
  );
}

export function useCollectionContext() {
  const context = useContext(CollectionContext);
  if (context === undefined) {
    throw new Error('useCollectionContext must be used within a CollectionProvider');
  }
  return context;
}
